generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts        Account[]
  jobApplications JobApplication[]
  jobPosts        JobPost[]
  savedJobPosts   JobPost[]        @relation("saved-job-posts")
  employmentTypes EmploymentType[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model JobTitle {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  jobPosts  JobPost[]
}

model EmploymentType {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  jobPosts  JobPost[]
}

model WorkplaceType {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  jobPosts  JobPost[]
}

model JobPost {
  id               String   @id @default(uuid())
  location         String
  companyName      String
  userId           String
  workplaceTypeId  String
  jobTitleId       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  employmentTypeId String
  savedByUserIds   String[]
  isHiring         Boolean  @default(true)
  applicantUserIds String[]

  applications   JobApplication[]
  user           User             @relation(fields: [userId], references: [id])
  workplaceType  WorkplaceType    @relation(fields: [workplaceTypeId], references: [id])
  jobTitle       JobTitle         @relation(fields: [jobTitleId], references: [id])
  employmentType EmploymentType   @relation(fields: [employmentTypeId], references: [id])
  savedByUsers   User[]           @relation("saved-job-posts")
}

model JobApplication {
  id         String   @id @default(uuid())
  caption    String?
  resumeLink String?
  contactNo  String
  email      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  jobPostId  String
  userId     String
  jobPost    JobPost? @relation(fields: [jobPostId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
}
